{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Saruul\\\\Desktop\\\\website\\\\hello-next\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useEffect } from 'react';\nimport useDarkMode from 'use-dark-mode';\nimport { ThemeProvider } from 'styled-components';\nimport { lightTheme, darkTheme } from '../theme';\n\nconst MyApp = ({\n  Component,\n  pageProps\n}) => {\n  const {\n    0: isMounted,\n    1: setIsMounted\n  } = useState(false);\n  const darkMode = useDarkMode(true);\n  const theme = darkMode.value ? darkTheme : lightTheme;\n  var isDark = true;\n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  function switchTheme() {\n    if (isDark) {\n      darkMode.disable;\n      isDark = false;\n    } else {\n      darkMode.enable;\n      isDark = true;\n    }\n  }\n\n  return __jsx(ThemeProvider, {\n    theme: theme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, __jsx(\"button\", {\n    onClick: darkMode.enable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"DARK MODE\"), __jsx(\"button\", {\n    onClick: darkMode.disable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"LIGHT MODE\"), isMounted && __jsx(Component, _extends({}, pageProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  })));\n};\n\nexport default MyApp;","map":{"version":3,"sources":["C:/Users/Saruul/Desktop/website/hello-next/pages/_app.js"],"names":["React","useState","useEffect","useDarkMode","ThemeProvider","lightTheme","darkTheme","MyApp","Component","pageProps","isMounted","setIsMounted","darkMode","theme","value","isDark","switchTheme","disable","enable"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,UAAtC;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA8B;AAC1C,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMW,QAAQ,GAAGT,WAAW,CAAC,IAAD,CAA5B;AACA,QAAMU,KAAK,GAAGD,QAAQ,CAACE,KAAT,GAAiBR,SAAjB,GAA6BD,UAA3C;AACA,MAAIU,MAAM,GAAG,IAAb;AACAb,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFQ,EAEN,EAFM,CAAT;;AAGA,WAASK,WAAT,GAAsB;AACpB,QAAGD,MAAH,EAAU;AACRH,MAAAA,QAAQ,CAACK,OAAT;AACAF,MAAAA,MAAM,GAAG,KAAT;AACD,KAHD,MAII;AACFH,MAAAA,QAAQ,CAACM,MAAT;AACAH,MAAAA,MAAM,GAAG,IAAT;AACD;AACF;;AACD,SACE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEF,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,OAAO,EAAED,QAAQ,CAACM,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAQ,IAAA,OAAO,EAAEN,QAAQ,CAACK,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGGP,SAAS,IAAI,MAAC,SAAD,eAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAHhB,CADF;AAOD,CAzBD;;AA0BA,eAAeF,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport useDarkMode from 'use-dark-mode'\r\nimport { ThemeProvider } from 'styled-components'\r\nimport { lightTheme, darkTheme } from '../theme'\r\n\r\nconst MyApp = ({ Component, pageProps }) => {\r\n  const [isMounted, setIsMounted] = useState(false)\r\n  const darkMode = useDarkMode(true)\r\n  const theme = darkMode.value ? darkTheme : lightTheme\r\n  var isDark = true;\r\n  useEffect(() => {\r\n    setIsMounted(true)\r\n  }, [])\r\n  function switchTheme(){\r\n    if(isDark){\r\n      darkMode.disable;\r\n      isDark = false;\r\n    }\r\n    else{\r\n      darkMode.enable;\r\n      isDark = true;\r\n    }\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <button onClick={darkMode.enable}>DARK MODE</button>\r\n      <button onClick={darkMode.disable}>LIGHT MODE</button>\r\n      {isMounted && <Component {...pageProps} />}\r\n    </ThemeProvider>\r\n  )\r\n}\r\nexport default MyApp"]},"metadata":{},"sourceType":"module"}