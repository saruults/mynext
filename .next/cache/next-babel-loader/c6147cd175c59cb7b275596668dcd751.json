{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Saruul\\\\Desktop\\\\website\\\\hello-next\\\\apollo\\\\withData.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ApolloProvider, getDataFromTree } from \"react-apollo\";\nimport initApollo from \"./initApollo\";\nexport default (function (ComposedComponent) {\n  var _class, _temp;\n\n  return _temp = _class = /*#__PURE__*/function (_React$Component) {\n    _inherits(WithData, _React$Component);\n\n    _createClass(WithData, null, [{\n      key: \"getInitialProps\",\n      value: function getInitialProps(ctx) {\n        var headers, serverState, composedInitialProps, apollo, url, app, state;\n        return _regeneratorRuntime.async(function getInitialProps$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                headers = ctx.req ? ctx.req.headers : {};\n                serverState = {}; // Evaluate the composed component's getInitialProps()\n\n                composedInitialProps = {};\n\n                if (!ComposedComponent.getInitialProps) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 6;\n                return _regeneratorRuntime.awrap(ComposedComponent.getInitialProps(ctx));\n\n              case 6:\n                composedInitialProps = _context.sent;\n\n              case 7:\n                if (true) {\n                  _context.next = 15;\n                  break;\n                }\n\n                apollo = initApollo(headers); // Provide the `url` prop data in case a graphql query uses it\n\n                url = {\n                  query: ctx.query,\n                  pathname: ctx.pathname\n                }; // Run all graphql queries\n\n                app = __jsx(ApolloProvider, {\n                  client: apollo,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 32\n                  },\n                  __self: this\n                }, __jsx(ComposedComponent, _extends({\n                  url: url\n                }, composedInitialProps, {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 33\n                  },\n                  __self: this\n                })));\n                _context.next = 13;\n                return _regeneratorRuntime.awrap(getDataFromTree(app));\n\n              case 13:\n                // Extract query data from the Apollo's store\n                state = apollo.getInitialState();\n                serverState = {\n                  apollo: {\n                    // Make sure to only include Apollo's data state\n                    data: state.data\n                  }\n                };\n\n              case 15:\n                return _context.abrupt(\"return\", _objectSpread({\n                  serverState: serverState,\n                  headers: headers\n                }, composedInitialProps));\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, this, null, _Promise);\n      }\n    }]);\n\n    function WithData(props) {\n      var _this;\n\n      _classCallCheck(this, WithData);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithData).call(this, props));\n      _this.apollo = initApollo(_this.props.headers, _this.props.serverState);\n      return _this;\n    }\n\n    _createClass(WithData, [{\n      key: \"render\",\n      value: function render() {\n        return __jsx(ApolloProvider, {\n          client: this.apollo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, __jsx(ComposedComponent, _extends({}, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        })));\n      }\n    }]);\n\n    return WithData;\n  }(React.Component), _defineProperty(_class, \"displayName\", \"WithData(\".concat(ComposedComponent.displayName, \")\")), _defineProperty(_class, \"propTypes\", {\n    serverState: PropTypes.object.isRequired\n  }), _temp;\n});","map":{"version":3,"sources":["C:/Users/Saruul/Desktop/website/hello-next/apollo/withData.js"],"names":["React","PropTypes","ApolloProvider","getDataFromTree","initApollo","ComposedComponent","ctx","headers","req","serverState","composedInitialProps","getInitialProps","apollo","url","query","pathname","app","state","getInitialState","data","props","Component","displayName","object","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,cAAhD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,gBAAe,UAAAC,iBAAiB,EAAI;AAAA;;AAClC;AAAA;;AAAA;AAAA;AAAA,sCAM+BC,GAN/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAOUC,gBAAAA,OAPV,GAOoBD,GAAG,CAACE,GAAJ,GAAUF,GAAG,CAACE,GAAJ,CAAQD,OAAlB,GAA4B,EAPhD;AAQQE,gBAAAA,WARR,GAQsB,EARtB,EAUI;;AACIC,gBAAAA,oBAXR,GAW+B,EAX/B;;AAAA,qBAYQL,iBAAiB,CAACM,eAZ1B;AAAA;AAAA;AAAA;;AAAA;AAAA,iDAamCN,iBAAiB,CAACM,eAAlB,CAAkCL,GAAlC,CAbnC;;AAAA;AAaMI,gBAAAA,oBAbN;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBYE,gBAAAA,MAnBZ,GAmBqBR,UAAU,CAACG,OAAD,CAnB/B,EAoBM;;AACMM,gBAAAA,GArBZ,GAqBkB;AAAEC,kBAAAA,KAAK,EAAER,GAAG,CAACQ,KAAb;AAAoBC,kBAAAA,QAAQ,EAAET,GAAG,CAACS;AAAlC,iBArBlB,EAuBM;;AACMC,gBAAAA,GAxBZ,GAyBQ,MAAC,cAAD;AAAgB,kBAAA,MAAM,EAAEJ,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE,MAAC,iBAAD;AAAmB,kBAAA,GAAG,EAAEC;AAAxB,mBAAiCH,oBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CAzBR;AAAA;AAAA,iDA6BYP,eAAe,CAACa,GAAD,CA7B3B;;AAAA;AA+BM;AACMC,gBAAAA,KAhCZ,GAgCoBL,MAAM,CAACM,eAAP,EAhCpB;AAkCMT,gBAAAA,WAAW,GAAG;AACZG,kBAAAA,MAAM,EAAE;AACN;AACAO,oBAAAA,IAAI,EAAEF,KAAK,CAACE;AAFN;AADI,iBAAd;;AAlCN;AAAA;AA2CMV,kBAAAA,WAAW,EAAXA,WA3CN;AA4CMF,kBAAAA,OAAO,EAAPA;AA5CN,mBA6CSG,oBA7CT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiDE,sBAAYU,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN;AACA,YAAKR,MAAL,GAAcR,UAAU,CAAC,MAAKgB,KAAL,CAAWb,OAAZ,EAAqB,MAAKa,KAAL,CAAWX,WAAhC,CAAxB;AAFiB;AAGlB;;AApDH;AAAA;AAAA,+BAsDW;AACP,eACE,MAAC,cAAD;AAAgB,UAAA,MAAM,EAAE,KAAKG,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,MAAC,iBAAD,eAAuB,KAAKQ,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,CADF;AAKD;AA5DH;;AAAA;AAAA,IAA8BpB,KAAK,CAACqB,SAApC,6DACmChB,iBAAiB,CAACiB,WADrD,8CAEqB;AACjBb,IAAAA,WAAW,EAAER,SAAS,CAACsB,MAAV,CAAiBC;AADb,GAFrB;AA8DD,CA/DD","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ApolloProvider, getDataFromTree } from \"react-apollo\";\nimport initApollo from \"./initApollo\";\n\nexport default ComposedComponent => {\n  return class WithData extends React.Component {\n    static displayName = `WithData(${ComposedComponent.displayName})`;\n    static propTypes = {\n      serverState: PropTypes.object.isRequired\n    };\n\n    static async getInitialProps(ctx) {\n      const headers = ctx.req ? ctx.req.headers : {};\n      let serverState = {};\n\n      // Evaluate the composed component's getInitialProps()\n      let composedInitialProps = {};\n      if (ComposedComponent.getInitialProps) {\n        composedInitialProps = await ComposedComponent.getInitialProps(ctx);\n      }\n\n      // Run all graphql queries in the component tree\n      // and extract the resulting data\n      if (!process.browser) {\n        const apollo = initApollo(headers);\n        // Provide the `url` prop data in case a graphql query uses it\n        const url = { query: ctx.query, pathname: ctx.pathname };\n\n        // Run all graphql queries\n        const app = (\n          <ApolloProvider client={apollo}>\n            <ComposedComponent url={url} {...composedInitialProps} />\n          </ApolloProvider>\n        );\n        await getDataFromTree(app);\n\n        // Extract query data from the Apollo's store\n        const state = apollo.getInitialState();\n\n        serverState = {\n          apollo: {\n            // Make sure to only include Apollo's data state\n            data: state.data\n          }\n        };\n      }\n\n      return {\n        serverState,\n        headers,\n        ...composedInitialProps\n      };\n    }\n\n    constructor(props) {\n      super(props);\n      this.apollo = initApollo(this.props.headers, this.props.serverState);\n    }\n\n    render() {\n      return (\n        <ApolloProvider client={this.apollo}>\n          <ComposedComponent {...this.props} />\n        </ApolloProvider>\n      );\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}