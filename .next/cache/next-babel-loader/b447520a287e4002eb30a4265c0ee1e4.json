{"ast":null,"code":"import { ApolloServer, gql } from \"apollo-server-micro\";\nimport Cors from \"micro-cors\";\nimport DataLoader from \"dataloader\";\nimport knex from \"knex\";\nconst db = knex({\n  client: \"pg\",\n  connection: process.env.PG_CONNECTION_STRING\n});\nconst typeDefs = gql`\n  type Query {\n    albums(first: Int = 25, skip: Int = 0): [Album!]!\n  }\n  type Artist {\n    id: ID!\n    name: String!\n    url: String!\n    albums(first: Int = 25, skip: Int = 0): [Album!]!\n  }\n  type Album {\n    id: ID!\n    name: String!\n    year: String!\n    artist: Artist!\n  }\n`;\nconst resolvers = {\n  Query: {\n    albums: (_parent, args, _context) => {\n      return db.select(\"*\").from(\"albums\").orderBy(\"year\", \"asc\").limit(Math.min(args.first, 50)).offset(args.skip);\n    }\n  },\n  Album: {\n    id: (album, _args, _context) => album.id,\n    artist: (album, _args, {\n      loader\n    }) => {\n      // return db\n      //   .select(\"*\")\n      //   .from(\"artists\")\n      //   .where({ id: album.artist_id })\n      //   .first();\n      return loader.artist.load(album.artist_id);\n    }\n  },\n  Artist: {\n    id: (artist, _args, _context) => artist.id,\n    albums: (artist, args, _context) => {\n      return db.select(\"*\").from(\"albums\").where({\n        artist_id: artist.id\n      }).orderBy(\"year\", \"asc\").limit(Math.min(args.first, 50)).offset(args.skip);\n    }\n  }\n};\nconst loader = {\n  artist: new DataLoader(ids => db.select(\"*\").from(\"artists\").whereIn(\"id\", ids).then(rows => ids.map(id => rows.find(row => row.id === id))))\n};\nconst cors = Cors({\n  allowMethods: [\"GET\", \"POST\", \"OPTIONS\"]\n});\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context: () => {\n    return {\n      loader\n    };\n  }\n});\nconst handler = apolloServer.createHandler({\n  path: \"/api/graphql\"\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default cors(handler);","map":{"version":3,"sources":["C:/Users/Saruul/Desktop/website/hello-next/pages/api/graphql.js"],"names":["ApolloServer","gql","Cors","DataLoader","knex","db","client","connection","process","env","PG_CONNECTION_STRING","typeDefs","resolvers","Query","albums","_parent","args","_context","select","from","orderBy","limit","Math","min","first","offset","skip","Album","id","album","_args","artist","loader","load","artist_id","Artist","where","ids","whereIn","then","rows","map","find","row","cors","allowMethods","apolloServer","context","handler","createHandler","path","config","api","bodyParser"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,GAAvB,QAAkC,qBAAlC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,MAAMC,EAAE,GAAGD,IAAI,CAAC;AACdE,EAAAA,MAAM,EAAE,IADM;AAEdC,EAAAA,UAAU,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAFV,CAAD,CAAf;AAKA,MAAMC,QAAQ,GAAGV,GAAI;;;;;;;;;;;;;;;;CAArB;AAkBA,MAAMW,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE,CAACC,OAAD,EAAUC,IAAV,EAAgBC,QAAhB,KAA6B;AACnC,aAAOZ,EAAE,CACNa,MADI,CACG,GADH,EAEJC,IAFI,CAEC,QAFD,EAGJC,OAHI,CAGI,MAHJ,EAGY,KAHZ,EAIJC,KAJI,CAIEC,IAAI,CAACC,GAAL,CAASP,IAAI,CAACQ,KAAd,EAAqB,EAArB,CAJF,EAKJC,MALI,CAKGT,IAAI,CAACU,IALR,CAAP;AAMD;AARI,GADS;AAYhBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,EAAE,EAAE,CAACC,KAAD,EAAQC,KAAR,EAAeb,QAAf,KAA4BY,KAAK,CAACD,EADjC;AAELG,IAAAA,MAAM,EAAE,CAACF,KAAD,EAAQC,KAAR,EAAe;AAAEE,MAAAA;AAAF,KAAf,KAA8B;AACpC;AACA;AACA;AACA;AACA;AACA,aAAOA,MAAM,CAACD,MAAP,CAAcE,IAAd,CAAmBJ,KAAK,CAACK,SAAzB,CAAP;AACD;AATI,GAZS;AAwBhBC,EAAAA,MAAM,EAAE;AACNP,IAAAA,EAAE,EAAE,CAACG,MAAD,EAASD,KAAT,EAAgBb,QAAhB,KAA6Bc,MAAM,CAACH,EADlC;AAENd,IAAAA,MAAM,EAAE,CAACiB,MAAD,EAASf,IAAT,EAAeC,QAAf,KAA4B;AAClC,aAAOZ,EAAE,CACNa,MADI,CACG,GADH,EAEJC,IAFI,CAEC,QAFD,EAGJiB,KAHI,CAGE;AAAEF,QAAAA,SAAS,EAAEH,MAAM,CAACH;AAApB,OAHF,EAIJR,OAJI,CAII,MAJJ,EAIY,KAJZ,EAKJC,KALI,CAKEC,IAAI,CAACC,GAAL,CAASP,IAAI,CAACQ,KAAd,EAAqB,EAArB,CALF,EAMJC,MANI,CAMGT,IAAI,CAACU,IANR,CAAP;AAOD;AAVK;AAxBQ,CAAlB;AAsCA,MAAMM,MAAM,GAAG;AACbD,EAAAA,MAAM,EAAE,IAAI5B,UAAJ,CAAekC,GAAG,IACxBhC,EAAE,CACCa,MADH,CACU,GADV,EAEGC,IAFH,CAEQ,SAFR,EAGGmB,OAHH,CAGW,IAHX,EAGiBD,GAHjB,EAIGE,IAJH,CAIQC,IAAI,IAAIH,GAAG,CAACI,GAAJ,CAAQb,EAAE,IAAIY,IAAI,CAACE,IAAL,CAAUC,GAAG,IAAIA,GAAG,CAACf,EAAJ,KAAWA,EAA5B,CAAd,CAJhB,CADM;AADK,CAAf;AAUA,MAAMgB,IAAI,GAAG1C,IAAI,CAAC;AAChB2C,EAAAA,YAAY,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,SAAhB;AADE,CAAD,CAAjB;AAIA,MAAMC,YAAY,GAAG,IAAI9C,YAAJ,CAAiB;AACpCW,EAAAA,QADoC;AAEpCC,EAAAA,SAFoC;AAGpCmC,EAAAA,OAAO,EAAE,MAAM;AACb,WAAO;AAAEf,MAAAA;AAAF,KAAP;AACD;AALmC,CAAjB,CAArB;AAQA,MAAMgB,OAAO,GAAGF,YAAY,CAACG,aAAb,CAA2B;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAA3B,CAAhB;AAEA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;AAMP,eAAeT,IAAI,CAACI,OAAD,CAAnB","sourcesContent":["import { ApolloServer, gql } from \"apollo-server-micro\";\r\nimport Cors from \"micro-cors\";\r\nimport DataLoader from \"dataloader\";\r\nimport knex from \"knex\";\r\n\r\nconst db = knex({\r\n  client: \"pg\",\r\n  connection: process.env.PG_CONNECTION_STRING\r\n});\r\n\r\nconst typeDefs = gql`\r\n  type Query {\r\n    albums(first: Int = 25, skip: Int = 0): [Album!]!\r\n  }\r\n  type Artist {\r\n    id: ID!\r\n    name: String!\r\n    url: String!\r\n    albums(first: Int = 25, skip: Int = 0): [Album!]!\r\n  }\r\n  type Album {\r\n    id: ID!\r\n    name: String!\r\n    year: String!\r\n    artist: Artist!\r\n  }\r\n`;\r\n\r\nconst resolvers = {\r\n  Query: {\r\n    albums: (_parent, args, _context) => {\r\n      return db\r\n        .select(\"*\")\r\n        .from(\"albums\")\r\n        .orderBy(\"year\", \"asc\")\r\n        .limit(Math.min(args.first, 50))\r\n        .offset(args.skip);\r\n    }\r\n  },\r\n\r\n  Album: {\r\n    id: (album, _args, _context) => album.id,\r\n    artist: (album, _args, { loader }) => {\r\n      // return db\r\n      //   .select(\"*\")\r\n      //   .from(\"artists\")\r\n      //   .where({ id: album.artist_id })\r\n      //   .first();\r\n      return loader.artist.load(album.artist_id);\r\n    }\r\n  },\r\n\r\n  Artist: {\r\n    id: (artist, _args, _context) => artist.id,\r\n    albums: (artist, args, _context) => {\r\n      return db\r\n        .select(\"*\")\r\n        .from(\"albums\")\r\n        .where({ artist_id: artist.id })\r\n        .orderBy(\"year\", \"asc\")\r\n        .limit(Math.min(args.first, 50))\r\n        .offset(args.skip);\r\n    }\r\n  }\r\n};\r\n\r\nconst loader = {\r\n  artist: new DataLoader(ids =>\r\n    db\r\n      .select(\"*\")\r\n      .from(\"artists\")\r\n      .whereIn(\"id\", ids)\r\n      .then(rows => ids.map(id => rows.find(row => row.id === id)))\r\n  )\r\n};\r\n\r\nconst cors = Cors({\r\n  allowMethods: [\"GET\", \"POST\", \"OPTIONS\"]\r\n});\r\n\r\nconst apolloServer = new ApolloServer({\r\n  typeDefs,\r\n  resolvers,\r\n  context: () => {\r\n    return { loader };\r\n  }\r\n});\r\n\r\nconst handler = apolloServer.createHandler({ path: \"/api/graphql\" });\r\n\r\nexport const config = {\r\n  api: {\r\n    bodyParser: false\r\n  }\r\n};\r\n\r\nexport default cors(handler);"]},"metadata":{},"sourceType":"module"}